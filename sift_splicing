
import cv2
import numpy as np 

def merge_images(img1 , img2):
	sift = cv2.xfeatures2d.SIFT_create()
	kp1 , des1 = sift.detectAndCompute(img1 , None)
	kp2 , des2 = sift.detectAndCompute(img2 , None)

	img1_sift_keypoints = img1.copy()
	img2_sift_keypoints = img2.copy()
	img1_sift_keypoints = cv2.drawKeypoints(img1 , kp1 , img1_sift_keypoints , flags = cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
	img2_sift_keypoints = cv2.drawKeypoints(img2 , kp2 , img2_sift_keypoints , flags = cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)

	bf = cv2.BFMatcher()
	matches = bf.knnMatch(des1 , des2  , k = 2  )

	good = []
	for m,n in matches:
		if m.distance < 0.5 * n.distance:
			good.append([m])

	point1 = []
	point2 = []
	for each in good:

		point1.append(kp1[each[0].queryIdx].pt)
		point2.append(kp2[each[0].trainIdx].pt)

	point1 = np.array(point1)
	point2 = np.array(point2)
	

	num1 = 0
	num2 = 0
	flag = img1.shape[1]/2
	for each in point1:
		if each[0] > flag:
			num1 += 1
		else:
			num2 += 1
	if num1 < num2:
		temp = img1
		img1 = img2
		img2 = temp
		temp = point1
		point1 = point2
		point2 = temp
	else:
		pass


	H,mask = cv2.findHomography(point2 , point1 , cv2.RANSAC )


	img2_leftup =[0 , 0 , 1]
	img2_leftdown = [ 0 , img2.shape[0]-1 , 1]
	img2_rightup = [img2.shape[1]-1 ,0 , 1]
	img2_rightdown = [img2.shape[1]-1 , img2.shape[0]-1 , 1]
	x1 = np.dot(img2_leftup , H[0])
	x2 = np.dot(img2_leftdown  , H[0])
	x3 = np.dot(img2_rightup , H[0])
	x4 = np.dot(img2_rightdown , H[0])
	y1 = np.dot(img2_leftup , H[1])
	y2 = np.dot(img2_leftdown , H[1])
	y3 = np.dot(img2_rightup , H[1])
	y4 = np.dot(img2_rightdown , H[1])



	y_out = int(max(y2 , y4 , img1.shape[0]-1))
	x_out = int(max(x3 ,x4))


	img_out = cv2.warpPerspective(img2 , H , ( x_out, y_out))



	for i in range(img_out.shape[0]):
		x_temple = x1 + (x2 - x1)/(y2 - y1) * (i - y1)
		for j in range(img_out.shape[1]):
			if j < x_temple:
				if i <  img1.shape[0]-1 and j < img1.shape[1]-1:
					img_out[i , j] = img1[i , j]
				else:
					img_out[i , j] = img_out[i , j]
			elif j > img1.shape[1]-1:
				img_out[i , j] = img_out[i , j]
			else:
				if i < img1.shape[0]-1:
					img_out[i , j] = (img1.shape[1]-1-j)/(img1.shape[1]-1-x_temple)*img1[i , j] + (j - x_temple)/(img1.shape[1]-1-x_temple) * img_out[i , j]
				else:
					img_out[i , j] = img_out[i , j]


	return img_out


img1 = cv2.imread('./images/1.jpg')
img2 = cv2.imread('./images/2.jpg')
img3 = cv2.imread('./images/3.jpg')


img =merge_images(merge_images(img1 , img2),img3)
cv2.imwrite('./images/result.png' , img)
